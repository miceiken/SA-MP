#include <a_samp>

#define COLOR_RED					0xFF4040FF
#define COLOR_GREEN					0x40FF40FF
#define COLOR_BLUE					0x4040FFFF
#define COLOR_CYAN					0x40FFFFFF
#define COLOR_PINK					0xFF40FFFF
#define COLOR_YELLOW				0xFFFF40FF
#define COLOR_WHITE					0xFFFFFFFF
#define COLOR_GREY					0xB4B5B7FF
#define COLOR_BLANK                 0x00000000

#define STARTMONEY          	5000
#define PAYPOINTMONEY           250

#define DIALOG_WEAPONS      	1001
#define DIALOG_BANK         	1002
#define DIALOG_BANK_WITHDRAW    1003
#define DIALOG_BANK_DEPOSIT		1004

// ----------------------------------------------------------------------------------------

main()
{
	print("\n");
	print("----------------------------------");
	print("        The Life Ladder           ");
	print("            by miceiken           ");
	print("----------------------------------");
	print("\n");
}

// ----------------------------------------------------------------------------------------

new Float:RandomPlayerSpawns[][3] = {
	{1958.3783,1343.1572,15.3746},
	{2199.6531,1393.3678,10.8203},
	{2483.5977,1222.0825,10.8203},
	{2637.2712,1129.2743,11.1797},
	{2000.0106,1521.1111,17.0625},
	{2024.8190,1917.9425,12.3386},
	{2261.9048,2035.9547,10.8203},
	{2262.0986,2398.6572,10.8203},
	{2244.2566,2523.7280,10.8203},
	{2335.3228,2786.4478,10.8203},
	{2150.0186,2734.2297,11.1763},
	{2158.0811,2797.5488,10.8203},
	{1969.8301,2722.8564,10.8203},
	{1652.0555,2709.4072,10.8265},
	{1564.0052,2756.9463,10.8203},
	{1271.5452,2554.0227,10.8203},
	{1441.5894,2567.9099,10.8203},
	{1480.6473,2213.5718,11.0234},
	{1400.5906,2225.6960,11.0234},
	{1598.8419,2221.5676,11.0625},
	{1558.0731,1007.8292,10.8125},
	{1705.2347,1025.6808,10.8203}
};

// ----------------------------------------------------------------------------------------

new WeaponNames[][32] = {
	{"Unarmed (Fist)"}, // 0
	{"Brass Knuckles"}, // 1
	{"Golf Club"}, // 2
	{"Night Stick"}, // 3
	{"Knife"}, // 4
	{"Baseball Bat"}, // 5
	{"Shovel"}, // 6
	{"Pool Cue"}, // 7
	{"Katana"}, // 8
	{"Chainsaw"}, // 9
	{"Purple Dildo"}, // 10
	{"Big White Vibrator"}, // 11
	{"Medium White Vibrator"}, // 12
	{"Small White Vibrator"}, // 13
	{"Flowers"}, // 14
	{"Cane"}, // 15
	{"Grenade"}, // 16
	{"Teargas"}, // 17
	{"Molotov"}, // 18
	{" "}, // 19
	{" "}, // 20
	{" "}, // 21
	{"Colt 45"}, // 22
	{"Colt 45 (Silenced)"}, // 23
	{"Desert Eagle"}, // 24
	{"Normal Shotgun"}, // 25
	{"Sawnoff Shotgun"}, // 26
	{"Combat Shotgun"}, // 27
	{"Micro Uzi"}, // 28
	{"MP5"}, // 29
	{"AK47"}, // 30
	{"M4"}, // 31
	{"Tec9"}, // 32
	{"Country Rifle"}, // 33
	{"Sniper Rifle"}, // 34
	{"Rocket Launcher"}, // 35
	{"Heat-Seeking Rocket Launcher"}, // 36
	{"Flamethrower"}, // 37
	{"Minigun"}, // 38
	{"Satchel Charge"}, // 39
	{"Detonator"}, // 40
	{"Spray Can"}, // 41
	{"Fire Extinguisher"}, // 42
	{"Camera"}, // 43
	{"Night Vision Goggles"}, // 44
	{"Infrared Vision Goggles"}, // 45
	{"Parachute"}, // 46
	{"Fake Pistol"} // 47
};

// ----------------------------------------------------------------------------------------

new MostMoneyPlayer = INVALID_PLAYER_ID, MostMoneyAmount = 0;

enum ePlayer
{
	Name[MAX_PLAYER_NAME],
	Kills,
	Deaths,
	Bank,
	Gang
}
new Players[MAX_PLAYERS][ePlayer];
new EmptyPlayer[ePlayer] = { "", 0, 0, 0, -1 };
new BuyingGuns[MAX_PLAYERS] = { 0 };

new Float:TeleportShop[MAX_PLAYERS][3];

// ----------------------------------------------------------------------------------------

#define MAX_WEAPONS         7

enum eWeapons
{
	ID,
	Cost,
	Ammo
}

new WeaponInfo[MAX_WEAPONS][eWeapons] =
{
    { 32,	5000, 	120 },      // Tec9
    { 28,	7000, 	120 },      // Micro UZI
	{ 25,	7000,	15 },       // Shotgun
	{ 27,	15000,  20 },       // Combat Shotgun
	{ 29,	15000, 	120 },      // MP5
	{ 30,	25000, 	120 },      // AK47
	{ 31,	30000, 	120 }       // M4
};

// This is the list that will be shown in the dialog when buying weapons.
// We can't make it dynamic without a hell of a code because the characters have different widths.
new WeaponList[256] = \
    "Tec9\t\t\t$5,000\r\n" \
    "Micro UZI\t\t$7,000\r\n" \
	"Shotgun\t\t$7,000\r\n" \
	"Combat Shotgun\t$15,000\r\n" \
	"MP5\t\t\t$15,000\r\n" \
	"AK47\t\t\t$25,000\r\n" \
	"M4\t\t\t$30,000\r\n";

// ----------------------------------------------------------------------------------------

#define MAX_CHECKPOINTS         20

#define MAX_TYPES				6
#define TYPE_EMPTY				0
#define TYPE_AMMUNATION_ENTER	1
#define TYPE_AMMUNATION_EXIT	2
#define TYPE_BANK				3
#define TYPE_PAYPOINT			4
#define TYPE_BUSINESS			5

enum eCheckpoints
{
	cType,
	Float:cX,
	Float:cY,
	Float:cZ,
	cName[64],
	cPrice,
	cIncome,
	cOwner
}

new Checkpoints[MAX_CHECKPOINTS][eCheckpoints] =
{
	{ TYPE_AMMUNATION_ENTER,	2158.83,	943.61,		10.82, "", 0, 0, INVALID_PLAYER_ID },
	{ TYPE_AMMUNATION_ENTER,	2538.89,	2084.09,	10.82, "", 0, 0, INVALID_PLAYER_ID },
	{ TYPE_AMMUNATION_EXIT,		285.65,		-86.61,		1001.52, "", 0, 0, INVALID_PLAYER_ID },
	{ TYPE_BANK,				2194.68,	1991.00,	12.29, "", 0, 0, INVALID_PLAYER_ID },
	{ TYPE_BANK,				2247.69,	2397.53,	10.82, "", 0, 0, INVALID_PLAYER_ID },
	{ TYPE_BANK,				2097.61,	2223.73,	11.02, "", 0, 0, INVALID_PLAYER_ID },
	{ TYPE_BANK,				2546.50,	1972.05,	10.82, "", 0, 0, INVALID_PLAYER_ID },
	{ TYPE_BANK,				2884.83,	2453.80,	11.06, "", 0, 0, INVALID_PLAYER_ID },
	{ TYPE_PAYPOINT,            2000.86,	1528.50,	14.62, "", 0, 0, INVALID_PLAYER_ID },
	{ TYPE_BUSINESS,			2020.86,	1007.56,	10.82, "Four Dragons", 300000, 15000, INVALID_PLAYER_ID },
	{ TYPE_BUSINESS,			2086.06,	2074.01,	11.05, "Sex Shop", 35000, 2250, INVALID_PLAYER_ID },
	{ TYPE_BUSINESS,			2094.83,	2121.56,	10.82, "Tattoo Parlor", 40000, 2000, INVALID_PLAYER_ID },
	{ TYPE_BUSINESS,			2072.85,	2121.49,	10.81, "Gay Gordos", 30000, 1500, INVALID_PLAYER_ID },
	{ TYPE_BUSINESS,			2214.36,	2525.03,	10.82, "Wedding Tackle", 25000, 1750, INVALID_PLAYER_ID },
	{ TYPE_BUSINESS,			2518.54,	2334.58,	10.82, "Dick's Sounds", 100000, 5000, INVALID_PLAYER_ID },
	{ TYPE_BUSINESS,			2516.37,	2297.36,	10.82, "Sex Shop", 35000, 2250, INVALID_PLAYER_ID },
	{ TYPE_BUSINESS,			2810.75,	1986.21,	10.82, "General Store", 50000, 2500, INVALID_PLAYER_ID },
	{ TYPE_BUSINESS,			2861.46,	2430.58,	11.06, "Hardon Electrical", 60000, 3000, INVALID_PLAYER_ID },
	{ TYPE_BUSINESS,			2802.31,	2430.22,	11.06, "Victim", 75000, 3750, INVALID_PLAYER_ID },
	{ TYPE_BUSINESS,			2090.51,	2223.81,	11.02, "Zip", 75000, 3750, INVALID_PLAYER_ID }
};

new CheckpointPickups[MAX_CHECKPOINTS] = { -1 };
new Text3D:CheckpointInfo[MAX_CHECKPOINTS] = { Text3D:INVALID_3DTEXT_ID };
new LastPickup[MAX_PLAYERS] = { -1 };

// ----------------------------------------------------------------------------------------

enum eVehicles
{
	vModelId,
	Float:vX,
	Float:vY,
	Float:vZ,
	Float:vA,
	vColor1,
	vColor2,
};
new Vehicles[][eVehicles] =
{
	{ 409, 1944.060180, 1346.048583, 8.909296, 180.259796, 0, 0 },
	{ 409, 1944.372436, 1335.769287, 8.909399, 178.763504, 1, 1 },
	{ 409, 2039.644287, 1008.337219, 10.471693, 178.775604, 0, 0 },
	{ 409, 2108.151367, 1440.662353, 10.620300, 268.155700, 0, 0 },
	{ 409, 2176.346679, 1676.173828, 10.620300, 179.926498, 1, 1 },
	{ 409, 2035.109863, 1917.645385, 11.976200, 180.578094, 1, 1 },
	{ 587, 2075.496337, 1490.658935, 10.397294, 0.920700, 10, 10 },
	{ 451, 2148.870605, 1398.368774, 10.520792, 359.684814, 78, 78 },
	{ 558, 2132.625244, 1409.267822, 10.450592, 180.309906, 36, 1 },
	{ 420, 2039.720703, 1335.422729, 10.450400, 178.921493, -1, -1 },
	{ 420, 2159.978271, 1687.942749, 10.533100, 15.706995, -1, -1 },
	{ 420, 2217.604003, 1838.133056, 10.597990, 180.327194, -1, -1 },
	{ 420, 2040.198974, 1344.926757, 10.449193, 178.602706, -1, -1 },
	{ 562, 2039.925659, 1019.872802, 10.330800, 179.779006, 33, 33 },
	{ 562, 1881.786743, 964.042419, 10.479700, 89.316497, 33, 33 },
	{ 562, 1881.530273, 991.934875, 10.478899, 88.559402, 33, 33 },
	{ 562, 1881.826293, 1035.103149, 10.478796, 90.564201, 33, 33 },
	{ 562, 1882.039306, 1054.415893, 10.479800, 90.389198, 33, 33 },
	{ 543, 1665.918212, 900.604919, 10.617897, 154.146804, 66, 84 },
	{ 561, 1655.638793, 999.327819, 10.634300, 1.639400, 112, 112 },
	{ 516, 1677.366455, 988.137573, 10.602100, 359.739105, 16, 16 },
	{ 411, 1889.276489, 1934.040527, 13.511898, 180.061599, 4, 4 },
	{ 422, 2791.836425, 1997.444091, 10.807900, 358.216705, 8, 10 },
	{ 402, 2812.985351, 2026.320190, 10.586997, 181.286102, 46, 46 },
	{ 401, 2822.080078, 2169.389160, 10.597496, 270.859710, 59, 59 },
	{ 402, 2582.845947, 2271.907470, 10.652600, 89.793800, 58, 58 },
	{ 561, 2764.578613, 1281.699096, 10.481900, 91.099296, 72, 72 },
	{ 405, 2782.195556, 1295.482788, 10.625000, 179.464401, 65, 65 },
	{ 414, 2624.372558, 1104.119018, 10.804491, 269.391601, 101, 101 },
	{ 463, 2437.982421, 2060.077392, 10.360500, 321.524993, 66, 66 },
	{ 463, 2439.459228, 2059.376220, 10.357295, 317.082702, 125, 125 },
	{ 463, 2436.281250, 2060.594970, 10.359700, 324.464691, 70, 70 },
	{ 533, 2444.274169, 1990.935424, 10.529397, 359.269897, 83, 83 },
	{ 480, 2458.234619, 1992.214111, 10.504300, 180.647094, 92, 92 },
	{ 482, 2170.921875, 1981.681762, 10.880900, 90.091697, 52, 52 },
	{ 402, 2231.912841, 1277.385131, 10.574500, 1.202200, 22, 22 },
	{ 451, 2182.837646, 1287.875244, 10.470800, 180.370193, 123, 1 },
	{ 415, 2171.943359, 1118.787963, 12.394200, 333.485900, 36, 1 },
	{ 429, 2141.761474, 1022.691894, 10.500000, 90.934799, 13, 13 },
	{ 436, 2150.956298, 987.421569, 10.586500, 180.870300, 87, 1 },
	{ 439, 2133.008300, 1006.849426, 10.715991, 89.004798, 43, 21 },
	{ 561, 2163.031982, 1006.487182, 10.698800, 270.545806, 101, 1 },
	{ 461, 2132.726562, 899.152770, 10.404600, 270.779296, 61, 1 },
	{ 462, 2132.746337, 906.012207, 10.419589, 268.038909, 2, 1 },
	{ 463, 2475.021728, 992.278076, 10.360198, 206.117797, 7, 7 },
	{ 474, 2197.837402, 936.021606, 10.582900, 185.277206, 105, 1 },
	{ 442, 2485.137939, 936.208496, 10.662400, 0.106200, 25, 109 },
	{ 587, 2460.379638, 918.719177, 10.535490, 90.461097, 53, 1 },
	{ 535, 2455.451904, 1275.557128, 10.584300, 270.074493, 28, 1 },
	{ 603, 2389.218994, 1658.274169, 10.445300, 358.775787, 60, 1 },
	{ 560, 2039.576660, 1560.160766, 10.377300, 179.595199, 9, 39 },
	{ 545, 2075.720703, 1482.413940, 10.482892, 359.422912, 44, 96 },
	{ 579, 2168.672851, 1412.414184, 10.745594, 179.380203, 53, 53 },
	{ 581, 2353.114990, 1405.479980, 10.414793, 272.089202, 66, 1 },
	{ 477, 2352.664550, 1436.970336, 10.549592, 269.346588, 75, 1 },
	{ 603, 2300.359863, 1466.036376, 10.446200, 90.123703, 53, 53 },
	{ 558, 2300.875488, 1458.643920, 10.477800, 90.377700, 92, 1 },
	{ 480, 2292.503417, 1454.767822, 13.815500, 270.644409, 68, 1 },
	{ 558, 2285.865966, 1518.008911, 16.927799, 0.234797, 77, 1 },
	{ 521, 2351.958984, 1487.674316, 17.785100, 268.552001, 92, 3 },
	{ 516, 2322.588867, 1423.011474, 22.198400, 89.600097, 122, 1 },
	{ 579, 2352.291015, 1472.854492, 32.077899, 268.459014, 28, 119 },
	{ 418, 2332.329833, 1387.906127, 36.538700, 179.047302, 64, 64 },
	{ 477, 2293.124511, 1455.221557, 39.511199, 270.095092, 22, 1 },
	{ 461, 2279.149414, 1387.722167, 42.405399, 181.363494, 61, 1 },
	{ 451, 2351.641601, 1415.726806, 42.526901, 269.374389, 123, 123 },
	{ 448, 2631.055908, 1845.861694, 10.416399, 264.500885, 3, 6 },
	{ 561, 2632.013671, 1858.265625, 10.698900, 270.976501, 113, 1 },
	{ 477, 2602.612792, 1846.643676, 10.572896, 90.521202, 121, 1 },
	{ 479, 2631.225341, 1794.812011, 10.616600, 270.036590, 60, 35 },
	{ 581, 2600.081298, 1691.246459, 10.410799, 89.178398, 36, 1 },
	{ 496, 2631.799804, 1681.165771, 10.478400, 271.200988, 31, 31 },
	{ 402, 2214.744140, 1512.283569, 10.651900, 269.681488, 39, 39 },
	{ 410, 2038.777465, 1588.840698, 10.325798, 179.604003, 10, 1 },
	{ 418, 1742.219116, 1906.167968, 10.913599, 90.207496, 117, 227 },
	{ 420, 1731.271484, 1974.957763, 10.599390, 273.041595, 6, 1 },
	{ 437, 1736.949951, 1878.427978, 10.918292, 269.901489, 47, 74 },
	{ 429, 1702.704711, 1804.376586, 10.500000, 359.971191, 1, 2 },
	{ 421, 1602.392456, 1839.945434, 10.702795, 178.476196, 36, 1 },
	{ 402, 1471.504882, 1928.615234, 11.110400, 91.643699, 22, 22 },
	{ 482, 1450.193115, 2017.988403, 10.903800, 90.872596, 91, 1 },
	{ 426, 1453.997680, 1957.776123, 10.963000, 179.062805, 62, 62 },
	{ 436, 1368.728881, 2020.818237, 11.211700, 88.961402, 92, 1 },
	{ 483, 1117.378540, 2112.537353, 10.809391, 0.421600, 1, 31 },
	{ 498, 1049.336669, 2135.978759, 10.891592, 87.962402, 20, 117 },
	{ 530, 980.703918, 2060.157714, 10.585597, 159.655303, 114, 1 },
	{ 542, 1023.168212, 2019.790405, 10.984000, 272.450012, 31, 93 },
	{ 554, 991.667480, 1886.870849, 11.329000, 270.609191, 15, 32 },
	{ 558, 984.550720, 1719.906250, 8.285300, 270.434295, 24, 1 },
	{ 522, 949.391174, 1662.119750, 8.415900, 269.588592, 6, 25 },
	{ 541, 1113.066894, 1726.988037, 10.445096, 179.998901, 22, 1 },
	{ 521, 1024.197021, 1724.465209, 10.391098, 93.460502, 92, 3 },
	{ 506, 1041.715820, 1357.135742, 10.524600, 85.361000, 7, 7 },
	{ 500, 1042.731079, 1346.471679, 10.923000, 81.140800, 28, 119 },
	{ 496, 979.992309, 1080.050292, 10.529294, 91.265800, 53, 56 },
	{ 482, 979.703491, 1104.727294, 10.944800, 90.761497, 71, 71 },
	{ 414, 1425.667480, 1039.293579, 10.432700, 90.185401, 102, 65 },
	{ 414, 1451.787719, 976.068725, 10.498700, 0.386900, 67, 1 },
	{ 410, 2004.406738, 735.305603, 11.029600, 180.857406, 9, 1 },
	{ 418, 2168.898925, 695.734191, 11.458292, 182.709106, 117, 227 },
	{ 429, 2362.062744, 731.070129, 11.094491, 0.172700, 1, 3 },
	{ 439, 2362.401123, 648.392578, 11.205800, 358.535797, 43, 21 },
	{ 460, 2358.076904, 519.057617, 1.760200, 270.663787, 17, 23 },
	{ 493, 2292.900634, 518.994079, -0.212696, 269.657897, 36, 13 },
	{ 496, 2086.235351, 658.954284, 10.891695, 180.341003, 66, 72 },
	{ 506, 1916.423461, 698.415222, 10.536890, 359.592498, 52, 52 },
	{ 516, 1852.883544, 698.927612, 11.008893, 92.271896, 119, 1 },
	{ 521, 1413.799804, 772.042785, 10.392000, 92.689903, 87, 118 },
	{ 533, 1484.051635, 787.600830, 10.529397, 359.402191, 74, 1 },
	{ 545, 1535.047241, 787.386108, 10.631400, 0.838998, 44, 96 },
	{ 578, 1645.152099, 740.436523, 11.444600, 357.896392, 1, 1 },
	{ 484, 1628.127319, 571.807128, 0.158700, 269.326293, 66, 36 },
	{ 477, 1544.692871, 2132.233398, 11.151391, 269.096893, 101, 1 },
	{ 480, 1613.601074, 2207.052734, 10.591897, 271.973602, 4, 4 },
	{ 479, 1519.201171, 2291.011230, 10.633090, 0.959999, 49, 23 },
	{ 419, 1340.871948, 2246.338623, 10.621500, 92.040901, 21, 1 },
	{ 462, 1431.454345, 2237.343994, 10.623000, 267.766906, 3, 1 },
	{ 401, 1508.790893, 2091.138671, 10.695300, 271.213195, 39, 39 },
	{ 439, 1068.460815, 2185.299560, 16.615100, 91.113502, 25, 78 },
	{ 426, 1126.560668, 2323.671142, 16.461500, 90.084999, 7, 7 },
	{ 421, 1135.462158, 2253.049560, 16.601200, 270.144012, 30, 1 },
	{ 419, 1115.499877, 2310.409179, 10.637100, 267.734405, 33, 75 },
	{ 561, 990.285888, 2307.304687, 11.129400, 89.958503, 101, 101 },
	{ 400, 1108.119750, 1903.844482, 10.912500, 269.194488, 113, 1 },
	{ 403, 1059.680053, 1916.688110, 11.427200, 0.603797, 101, 1 },
	{ 402, 2039.086425, 1160.654296, 10.503293, 179.514602, 22, 22 },
	{ 411, 1844.428588, 1209.737915, 10.559597, 91.195503, 116, 1 },
	{ 522, 1843.698120, 1255.360107, 10.390192, 89.638198, 3, 8 },
	{ 439, 1866.851806, 1179.215332, 10.734800, 0.170699, 37, 78 },
	{ 587, 1552.690551, 1025.626708, 10.535593, 267.406402, 66, 1 },
	{ 543, 1332.600585, 1159.043701, 10.628993, 270.014801, 8, 90 },
	{ 545, 1281.113403, 2545.587646, 10.631500, 90.407402, 30, 1 },
	{ 420, 1433.654052, 2608.739501, 10.677200, 89.262702, 6, 76 },
	{ 508, 1374.024902, 2644.289306, 11.195590, 179.446701, 1, 1 },
	{ 437, 1352.356079, 2647.123046, 10.944293, 180.432800, 105, 20 },
	{ 451, 1319.560791, 2697.662841, 10.526800, 0.702700, 61, 61 },
	{ 437, 1296.465332, 2646.847167, 10.953598, 1.186900, 54, 7 },
	{ 506, 1464.452026, 2773.077148, 10.376399, 181.178100, 3, 3 },
	{ 546, 1475.370971, 2839.551757, 10.644392, 181.034606, 11, 11 },
	{ 541, 1455.950317, 2878.836181, 10.444890, 0.136800, 51, 1 },
	{ 545, 1529.575561, 2867.650146, 10.631400, 268.044311, 39, 1 },
	{ 421, 1529.630126, 2835.737548, 10.640892, 269.923400, 62, 62 },
	{ 457, 1422.797241, 2830.829101, 10.447196, 91.412597, 13, 1 },
	{ 457, 1369.023681, 2784.158935, 10.446990, 94.373100, 34, 1 },
	{ 457, 1423.065063, 2835.139892, 10.447093, 92.888397, 58, 1 },
	{ 572, 1420.300781, 2802.637451, 10.400197, 179.910797, 30, 1 },
	{ 561, 1618.577636, 2834.736083, 10.634300, 359.582092, 25, 78 },
	{ 581, 1737.612426, 2780.035644, 10.645400, 100.843803, 54, 1 },
	{ 579, 1673.044067, 2696.733398, 10.764595, 2.855000, 37, 37 },
	{ 522, 1927.439331, 2729.984130, 10.392395, 182.576797, 6, 25 },
	{ 562, 1998.121337, 2758.488525, 10.482192, 0.379400, 116, 1 },
	{ 542, 2260.118408, 2737.893066, 10.563796, 271.140686, 24, 118 },
	{ 498, 2311.960937, 2763.321533, 10.887989, 272.104400, 13, 120 },
	{ 421, 2143.114257, 2807.177734, 10.576498, 92.502197, 30, 72 },
	{ 480, 2167.246337, 2750.698730, 10.594799, 271.078491, 12, 12 },
	{ 419, 2349.052734, 2578.484863, 10.613492, 0.165600, 2, 39 },
	{ 448, 2363.066894, 2531.973632, 10.417300, 267.678985, 3, 6 },
	{ 541, 2417.866210, 2529.008544, 10.444993, 178.985504, 36, 8 },
	{ 415, 2455.140136, 2531.605957, 21.645799, 179.447204, 0, 1 },
	{ 418, 2530.625244, 2535.952392, 21.967899, 268.574890, 81, 81 },
	{ 436, 2506.200195, 2515.666259, 21.641099, 88.968498, 11, 1 },
	{ 429, 2537.902343, 2397.252929, 3.890599, 0.515797, 10, 10 },
	{ 474, 2511.098388, 2394.394042, 10.582798, 269.365997, 97, 1 },
	{ 477, 2501.100585, 2131.041015, 10.498700, 269.445312, 92, 1 },
	{ 518, 2589.019775, 2166.314208, 10.483900, 1.150200, 17, 1 },
	{ 533, 2620.097900, 2086.911376, 10.528100, 180.650405, 79, 1 },
	{ 535, 2567.616699, 2059.194824, 10.584600, 0.875800, 28, 1 },
	{ 541, 2075.646240, 1312.313598, 10.296600, 359.428710, 2, 1 },
	{ 546, 2183.697021, 1878.711425, 10.544795, 359.991790, 78, 38 },
	{ 410, 2192.240966, 1856.690185, 10.620900, 181.334793, 75, 1 },
	{ 480, 2203.436279, 1787.941162, 10.503396, 179.694702, 60, 1 },
	{ 541, 2181.531005, 1821.720458, 10.445096, 0.619300, 51, 1 },
	{ 533, 2129.184814, 1810.271972, 10.380990, 332.941009, 74, 1 },
	{ 477, 2118.662109, 1892.077026, 10.376296, 181.266799, 6, 6 },
	{ 410, 2118.623291, 1910.194824, 10.768795, 180.423797, 40, 110 },
	{ 496, 2102.421386, 2066.005371, 10.536600, 270.854705, 66, 72 },
	{ 477, 2103.548339, 2089.032226, 10.574090, 269.295410, 101, 1 },
	{ 516, 2028.684814, 2155.972412, 10.624794, 264.312591, 2, 39 },
	{ 522, 1995.411621, 2185.783691, 10.381299, 183.389099, 36, 105 },
	{ 508, 2010.596313, 2137.159423, 11.196900, 270.061004, 1, 1 },
	{ 414, 2005.933715, 2059.600830, 10.994091, 181.828704, 110, 93 },
	{ 414, 2060.339355, 2237.012695, 10.544692, 89.348197, 121, 93 },
	{ 448, 2077.078369, 2226.716552, 10.414196, 3.170099, 3, 6 },
	{ 420, 2107.736083, 2206.797851, 10.823800, 178.261505, 6, 76 },
	{ 516, 2094.552978, 2206.632568, 10.590394, 178.851699, 119, 45 },
	{ 477, 2156.278808, 2188.876708, 10.351593, 358.428100, 14, 14 },
	{ 415, 2339.132324, 2114.056152, 10.451189, 177.157592, 20, 1 },
	{ 409, 2361.332031, 2170.061767, 10.525094, 359.309387, 1, 1 },
	{ 461, 2380.352294, 2018.264526, 10.340291, 272.190612, 13, 1 },
	{ 587, 2338.759033, 1943.952514, 10.410200, 182.173995, 40, 1 },
	{ 482, 2221.347900, 1944.529296, 9.795100, 87.255401, 37, 37 },
	{ 479, 2272.502929, 1953.104125, 9.489892, 179.029205, 7, 7 },
	{ 541, 2244.724609, 1997.919433, 15.428194, 0.847500, 12, 32 },
	{ 541, 2222.479736, 1936.187866, 25.924100, 88.721000, 68, 8 },
	{ 415, 2294.626220, 1952.243530, 26.025100, 268.425811, 7, 7 },
	{ 436, 2246.806152, 1939.515258, 31.546300, 179.669601, 33, 0 },
	{ 461, 2283.646972, 1975.238037, 28.401100, 180.968200, 62, 62 },
	{ 482, 2217.031982, 2048.480224, 10.945590, 89.909500, 85, 85 },
	{ 479, 2296.607421, 2046.145385, 10.616900, 271.516693, 49, 23 },
	{ 461, 2259.054443, 2065.490478, 10.387290, 2.142997, 61, 1 },
	{ 477, 2272.603271, 2326.243408, 10.527194, 88.597297, 61, 61 },
	{ 401, 2464.208251, 2236.970458, 10.550700, 88.652496, 39, 39 },
	{ 428, 2242.502441, 2231.374755, 10.901000, 270.885986, 4, 75 },
	{ 516, 2007.507080, 2263.209228, 17.607400, 2.405200, 13, 76 },
	{ 522, 2014.793823, 2244.958007, 23.484800, 269.401214, 8, 82 },
	{ 436, 1907.263305, 2290.840576, 11.000000, 180.490402, 84, 1 },
	{ 480, 1705.033447, 2242.983642, 10.594099, 179.640899, 12, 12 },
	{ 436, 1691.177368, 2131.142578, 11.079998, 91.232498, 87, 1 },
	{ 414, 1842.618774, 2090.455566, 10.890700, 176.306503, 36, 36 },
	{ 436, 1908.181884, 2078.656982, 10.569499, 270.352905, 53, 1 },
	{ 516, 1912.829467, 2158.573730, 10.616497, 271.831512, 47, 47 },
	{ 525, 1963.459960, 2171.020751, 10.691300, 257.135314, 1, 1 },
	{ 496, 1993.247558, 2058.352050, 10.536700, 357.201904, 53, 56 },
	{ 535, 2075.963134, 1677.724975, 10.435091, 0.184900, 118, 1 },
	{ 418, 2452.309326, 1357.830444, 10.913393, 359.769409, 61, 61 },
	{ 415, 2447.572998, 1327.113525, 10.590800, 179.645599, 0, 1 },
	{ 414, 2612.054199, 1429.533569, 10.913990, 183.779006, 24, 1 },
	{ 420, 2488.516113, 1534.176147, 10.524000, 231.453796, 6, 1 },
	{ 409, 2481.387695, 1544.038574, 10.512290, 202.967697, 1, 1 },
	{ 579, 2498.419433, 1676.301879, 10.552392, 1.352100, 101, 101 },
	{ 474, 2463.021972, 1676.726684, 10.583100, 359.312896, 97, 1 },
	{ 518, 2788.651855, 2431.322021, 10.491200, 314.894287, 2, 39 },
	{ 516, 2815.146484, 2406.841796, 10.654100, 315.833496, 119, 1 },
	{ 506, 2833.459228, 2309.875000, 10.524700, 179.743698, 76, 76 },
	{ 516, 2891.355957, 2379.125244, 10.623000, 270.946594, 41, 29 },
	{ 417, 2093.375488, 2415.158203, 74.767799, 94.318000, 2, 29 },
	{ 402, 2095.864501, 2410.819091, 45.050300, 267.761413, 110, 110 },
	{ 516, 2104.448974, 2396.052490, 40.634101, 271.388000, 119, 62 },
	{ 402, 2095.843750, 2398.741699, 27.889799, 268.898895, 99, 81 },
	{ 477, 2086.578369, 2416.639404, 23.423099, 90.822097, 3, 3 },
	{ 516, 2103.982910, 2419.371337, 14.897800, 270.812896, 24, 55 },
	{ 561, 2065.853515, 2479.761230, 10.698900, 359.730499, 4, 1 },
	{ 414, 2130.840332, 2514.213378, 10.913990, 193.668197, 24, 1 },
	{ 410, 1900.461791, 2437.422851, 10.473999, 92.516502, 45, 1 },
	{ 408, 1730.600952, 2336.270263, 11.368494, 2.634598, 26, 26 },
	{ 486, 2707.185058, 822.165771, 10.717900, 2.550698, 1, 1 },
	{ 486, 2707.000976, 908.633605, 10.897994, 176.352493, 1, 1 },
	{ 482, 2697.664550, 885.691101, 10.311300, 271.488006, 71, 71 },
	{ 554, 2701.640869, 828.374023, 10.175800, 359.836914, 15, 32 },
	{ 524, 2635.240722, 848.007202, 6.798600, 311.171997, 61, 27 },
	{ 524, 2630.124023, 851.053222, 6.972496, 315.847808, 65, 31 },
	{ 530, 2687.155273, 909.947509, 10.491200, 199.437606, 111, 1 },
	{ 530, 2683.346923, 908.788818, 10.456700, 197.738601, 112, 1 },
	{ 455, 2685.813720, 864.354187, 10.358798, 358.581787, 84, 58 },
	{ 560, 2705.906494, 788.852416, 10.603693, 359.239898, 33, 0 },
	{ 403, 2873.092041, 920.317626, 11.357192, 94.349502, 28, 1 },
	{ 403, 2873.228271, 913.362182, 11.767600, 85.795196, 24, 77 },
	{ 435, 2855.420654, 896.032409, 11.171600, 359.754791, 24, 77 },
	{ 435, 2818.083496, 897.670410, 11.301198, 359.228485, 24, 77 },
	{ 435, 2827.546630, 897.556030, 11.294300, 0.941398, 24, 77 },
	{ 530, 2884.703369, 941.767395, 10.516098, 90.436698, 112, 1 },
	{ 530, 2833.149169, 996.521118, 10.514389, 173.681594, 13, 1 },
	{ 482, 2805.153320, 968.824279, 10.870800, 178.907897, 48, 48 },
	{ 560, 2817.451171, 941.457214, 10.455595, 0.988300, 9, 39 },
	{ 578, 2840.352539, 994.477783, 11.374300, 176.826202, 1, 1 },
	{ 519, 1328.619628, 1612.250000, 11.743700, 270.000091, 1, 1 },
	{ 593, 1352.110229, 1779.000000, 11.288000, 270.000000, 2, 1 },
	{ 593, 1352.111572, 1801.500000, 11.286293, 269.999908, 36, 8 },
	{ 522, 1676.433471, 1322.159179, 10.331995, 87.718902, 7, 79 },
	{ 417, 1286.872436, 1449.625000, 10.872200, 270.000000, 0, 0 },
	{ 553, 1571.438476, 1487.751342, 12.168498, 311.157714, 71, 87 },
	{ 553, 1597.410888, 1342.693481, 12.186491, 344.844909, 71, 87 },
	{ 487, 1655.057617, 1554.564941, 10.987895, 64.421096, 26, 3 },
	{ 487, 1397.568969, 1770.047485, 10.997097, 269.305999, 26, 3 },
	{ 487, 1618.414306, 1357.542846, 10.989295, 169.455505, 26, 3 },
	{ 469, 1358.118896, 1253.543579, 10.828495, 358.578796, 1, 3 },
	{ 609, 1341.588623, 1729.456420, 10.886400, 91.642799, 36, 36 },
	{ 519, 1303.797119, 1360.934814, 11.740500, 267.790710, 1, 1 },
	{ 511, 1341.303100, 1682.643188, 12.196700, 268.587005, 3, 90 },
	{ 512, 1326.161132, 1420.433349, 11.102993, 178.144104, 17, 39 },
	{ 513, 1280.128051, 1411.803222, 11.365300, 223.443206, 48, 18 },
	{ 515, 1573.480102, 1654.405761, 11.842200, 91.497596, 24, 77 },
	{ 435, 1554.533813, 1669.478393, 11.454195, 180.000000, 1, 1 },
	{ 435, 1581.974243, 1664.066528, 11.452589, 180.000000, 1, 1 },
	{ 404, 1309.784790, 1279.573486, 10.554400, 359.268096, 101, 101 },
	{ 411, 1682.576904, 1316.656127, 10.547400, 358.399414, 123, 1 },
	{ 436, 1663.402587, 1297.132080, 10.587697, 359.486694, 83, 1 },
	{ 439, 1642.003540, 1293.233154, 10.715600, 268.661499, 54, 38 },
	{ 462, 1713.811767, 1319.255859, 10.416500, 268.422210, 2, 1 },
	{ 474, 1695.432983, 1306.184326, 10.585300, 179.389099, 110, 1 },
	{ 480, 1682.453247, 1286.905761, 10.594491, 179.203994, 6, 6 },
	{ 420, 1723.873046, 1501.497924, 10.518692, 167.014007, 6, 1 },
	{ 420, 1712.561035, 1461.247070, 10.537500, 162.193298, 6, 1 },
	{ 420, 1707.106689, 1437.878662, 10.450098, 182.450500, 6, 1 },
	{ 438, 1717.647949, 1479.141723, 10.744000, 163.723403, 6, 76 },
	{ 438, 1707.253662, 1415.724975, 10.564000, 189.801605, 6, 76 },
	{ 437, 1719.106201, 1381.204223, 10.625597, 197.749694, 123, 20 },
	{ 485, 1537.652832, 1211.179443, 10.470100, 0.890797, 1, 79 },
	{ 592, 1340.505493, 1495.639648, 12.016900, 270.777008, 1, 1 },
	{ 485, 1353.343017, 1642.027099, 10.482500, 175.000106, 1, 76 },
	{ 422, 1325.315795, 1278.718994, 10.803700, 180.693603, 101, 25 },
	{ 505, 1282.698120, 1304.375366, 10.964694, 82.884002, 76, 102 },
	{ 407, 1282.089111, 1477.378051, 11.057700, 244.141601, 3, 1 },
	{ 407, 1312.903808, 1580.936523, 11.056200, 272.974609, 3, 1 },
	{ 599, 2256.298828, 2442.577636, 11.007816, 359.436828, -1, -1 },
	{ 598, 2256.304687, 2476.245605, 10.567317, 178.000473, -1, -1 },
	{ 598, 2269.077636, 2476.198730, 10.565814, 180.280136, -1, -1 },
	{ 598, 2277.891845, 2459.623291, 10.567135, 179.435745, -1, -1 },
	{ 599, 2273.379882, 2443.240966, 11.017015, 0.179082, -1, -1 },
	{ 523, 2283.517578, 2444.097167, 10.381199, 359.058166, -1, -1 },
	{ 523, 2280.629638, 2443.893554, 10.390400, 359.739776, -1, -1 },
	{ 427, 2291.431884, 2443.862304, 10.961174, 359.150238, -1, -1 },
	{ 497, 2333.723876, 2391.129394, 10.997674, 182.350723, -1, -1 }
};

// ----------------------------------------------------------------------------------------

public OnGameModeInit()
{
	SetGameModeText("Life Ladder");
	
	DisableInteriorEnterExits();
	AllowInteriorWeapons(false);
	UsePlayerPedAnims();
	EnableStuntBonusForAll(false);
	ShowNameTags(true);
	ShowPlayerMarkers(PLAYER_MARKERS_MODE_GLOBAL);
	
	new BadSkins[] = { 3, 4, 5, 6, 8, 42, 65, 74, 86, 119, 149, 208, 268, 273, 289 };
	for (new i = 0; i < 299; i++)
	{
		new ValidSkin = true;
		for (new x = 0; x < sizeof(BadSkins); x++) { if (BadSkins[x] == i) { ValidSkin = false; } }
		if (ValidSkin) AddPlayerClass(i, 1958.3783, 1343.1572, 15.3746, 269.1425, 0, 0, 0, 0, 0, 0);
	}
	
	for (new i = 0; i < sizeof(Checkpoints); i++)
	{
	    if (Checkpoints[i][cType] != TYPE_EMPTY)
	    {
	        new pid = 0;
	        switch (Checkpoints[i][cType])
	        {
	            case TYPE_AMMUNATION_ENTER, TYPE_AMMUNATION_EXIT:
	            {
					pid = 1318;
				}
	            
	            case TYPE_BANK:
	            {
	                pid = 1274;
				}
	            
	            case TYPE_PAYPOINT:
				{
				    pid = 1212;
	            	CheckpointInfo[i] = Create3DTextLabel("Paypoint", 0x88EE88FF, Checkpoints[i][cX], Checkpoints[i][cY], Checkpoints[i][cZ] + 0.75, 75.0, 0, 1);
				}
				
				case TYPE_BUSINESS:
				{
				    pid = 1272;
					CheckpointInfo[i] = Create3DTextLabel(Checkpoints[i][cName], 0xAAAAFFFF, Checkpoints[i][cX], Checkpoints[i][cY], Checkpoints[i][cZ] + 0.75, 75.0, 0, 1);
				}
	        }
	        
			new id = CreatePickup(pid, 23, Checkpoints[i][cX], Checkpoints[i][cY], Checkpoints[i][cZ], 0);
			CheckpointPickups[id] = i;
	    }
	}
	
	for (new i = 0; i < sizeof(Vehicles); i++)
	{
	    CreateVehicle(Vehicles[i][vModelId], Vehicles[i][vX], Vehicles[i][vY], Vehicles[i][vZ], Vehicles[i][vA], Vehicles[i][vColor1], Vehicles[i][vColor2], 360);
	}
	
	SetTimer("BusinessTimer", 30000, true);
	SetTimer("PaypointTimer", 2000, true);
	
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnGameModeExit()
{
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnPlayerRequestClass(playerid, classid)
{
	SetPlayerInterior(playerid, 3);
	SetPlayerPos(playerid, 349.0453, 193.2271, 1014.1797);
	SetPlayerFacingAngle(playerid, 286.25);
	SetPlayerCameraPos(playerid, 352.9164, 194.5702, 1014.1875);
	SetPlayerCameraLookAt(playerid, 349.0453, 193.2271, 1014.1797);
	
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnPlayerConnect(playerid)
{
	new name[MAX_PLAYER_NAME], msg[128];
	Players[playerid] = EmptyPlayer;
	BuyingGuns[playerid] = 0;
	GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	Players[playerid][Name] = name;
	
	format(msg, 128, "Welcome to Life Ladder: Las Venturas - for more information please type /help");
	SendClientMessage(playerid, COLOR_RED, msg);
	GameTextForPlayer(playerid, "~r~Life Ladder: ~l~~b~Las Venturas", 3000, 5);
	
	format(msg, 128, "* %s connected", name);
	SendClientMessageToAllEx(COLOR_WHITE, msg, playerid);
	SendDeathMessage(playerid, INVALID_PLAYER_ID, 200);
	
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnPlayerDisconnect(playerid, reason)
{
	new msg[128];
	format(msg, 128, "* %s disconnected", Players[playerid][Name]);
	SendClientMessageToAllEx(COLOR_WHITE, msg, playerid);
    SendDeathMessage(INVALID_PLAYER_ID, playerid, 201);
    
    new PAvail = 0;
    for (new i = 0; i < MAX_CHECKPOINTS; i++)
    {
        if (Checkpoints[i][cOwner] == playerid)
        {
            Checkpoints[i][cOwner] = INVALID_PLAYER_ID;
            PAvail++;
        }
    }
    if (PAvail > 0)
    {
        format(msg, 128, "%d properties are now available for purchase after %s left", PAvail, Players[playerid][Name]);
        SendClientMessageToAllEx(COLOR_CYAN, msg, playerid);
    }
    
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnPlayerSpawn(playerid)
{
	ResetPlayerMoney(playerid);
	if (Players[playerid][Bank] <= STARTMONEY) { GivePlayerMoney(playerid, STARTMONEY); }
	
	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 24, 250);
	
	// Spawn player at random position
	new spawn = random(sizeof(RandomPlayerSpawns));
	SetPlayerPos(playerid, RandomPlayerSpawns[spawn][0], RandomPlayerSpawns[spawn][1], RandomPlayerSpawns[spawn][2]);
	
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnPlayerDeath(playerid, killerid, reason)
{
	if (killerid != INVALID_PLAYER_ID)
	{
		new msg[128];
		new money = GetPlayerMoney(playerid);
		if (money > 0) { format(msg, 128, "* You received %s for killing %s", FormatMoney(money), Players[playerid][Name]); }
		else { format(msg, 128, "* That poor bastard %s didn't have any money on him!", Players[playerid][Name]); }
		SendClientMessage(killerid, COLOR_YELLOW, msg);
		GivePlayerMoney(killerid, money);
		GivePlayerMoney(playerid, -money);
		
		Players[killerid][Kills]++;
	}
	
	Players[playerid][Deaths]++;
	
	SendDeathMessage(killerid, playerid, reason);
	
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnVehicleSpawn(vehicleid)
{
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnVehicleDeath(vehicleid, killerid)
{
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnPlayerText(playerid, text[])
{
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnPlayerCommandText(playerid, cmdtext[])
{
	new cmd[256], idx, tmp[256];
	
	cmd = strtok(cmdtext, idx);

	if (!strcmp("/help", cmd, true))
	{
	    SendClientMessage(playerid, COLOR_BLANK, " ");
	    SendClientMessage(playerid, COLOR_PINK, "The goal is simple: Earn money by killing people. Use the money for weapons to kill even more people.");
	    SendClientMessage(playerid, COLOR_PINK, "You can also stand at paypoints to reguarly receive money. There are properties for sale giving you a regular income.");
	    SendClientMessage(playerid, COLOR_PINK, "You can refill your health by going to vendingmachines around the city.");
	    SendClientMessage(playerid, COLOR_PINK, "For a list of commands you can type /commands");
	    SendClientMessage(playerid, COLOR_BLANK, " ");
		return 1;
	}
	
	if (!strcmp("/commands", cmd, true))
	{
	    SendClientMessage(playerid, COLOR_BLANK, " ");
	    SendClientMessage(playerid, COLOR_YELLOW, "/help, /commands, /stats, /bank, /kill");
	    SendClientMessage(playerid, COLOR_YELLOW, "/weapons, /myproperties, /buy, /sell <id>");
	    SendClientMessage(playerid, COLOR_BLANK, " ");
		return 1;
	}
	
	if (!strcmp("/stats", cmd, true))
	{
	    new msg[128];
	    new POwned = 0, PIncome = 0;
	    
	    for (new i = 0; i < MAX_CHECKPOINTS; i++)
		{
			if (Checkpoints[i][cOwner] == playerid)
			{
			    POwned++;
			    PIncome += Checkpoints[i][cIncome];
			}
		}
		
	    format(msg, 128, "[Kills: %d - Deaths: %d] [Money: %s - Bank: %s] [Properties: %d - Income: %s]",
			Players[playerid][Kills], Players[playerid][Deaths], FormatMoney(GetPlayerMoney(playerid)), FormatMoney(Players[playerid][Bank]), POwned, FormatMoney(PIncome));
	    SendClientMessage(playerid, COLOR_YELLOW, msg);
	    
	    return 1;
	}
	
	if (!strcmp("/bank", cmd, true))
	{
	    new id = LastPickup[playerid];
	    if (Checkpoints[id][cType] != TYPE_BANK || !IsPlayerInRangeOfPoint(playerid, 3.0, Checkpoints[id][cX], Checkpoints[id][cY], Checkpoints[id][cZ]))
	    {
	    	SendClientMessage(playerid, COLOR_RED, "* You are not near a bank");
	    	return 1;
	    }
	    
	    ShowPlayerDialog(playerid, DIALOG_BANK, DIALOG_STYLE_LIST, "Bank", "Withdraw\nDeposit\n", "Select", "Cancel");

		return 1;
	}
	
	if (!strcmp("/kill", cmd, true))
	{
	    new Float:Health;
		GetPlayerHealth(playerid, Health);
	    if (Health > 90.0) { SetPlayerHealth(playerid, 0.0); }
	    SendClientMessage(playerid, COLOR_RED, "You coward!");
		return 1;
	}
	
	if (!strcmp("/weapons", cmd, true))
	{
	    if (BuyingGuns[playerid])
	    {
	    	ShowPlayerDialog(playerid, DIALOG_WEAPONS, DIALOG_STYLE_LIST, "Weapons", WeaponList, "Buy", "Cancel");
	    }
	    else { SendClientMessage(playerid, COLOR_RED, "* You need to be inside of an Ammu-nation"); }
		return 1;
	}
	
	if (!strcmp("/myproperties", cmd, true) || !strcmp("/myprops", cmd, true))
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "You own these properties:");
	    new msg[128];
	    for (new i = 0; i < MAX_CHECKPOINTS; i++)
	    {
	        if (Checkpoints[i][cOwner] == playerid)
	        {
	            format(msg, 128, "%d: %s", i, Checkpoints[i][cName]);
	            SendClientMessage(playerid, COLOR_YELLOW, msg);
	        }
	    }
	    return 1;
	}
	
	if (!strcmp("/buy", cmd, true))
	{
	    new id = LastPickup[playerid];
	    
		if (Checkpoints[id][cType] != TYPE_BUSINESS || !IsPlayerInRangeOfPoint(playerid, 3.0, Checkpoints[id][cX], Checkpoints[id][cY], Checkpoints[id][cZ]))
		{
		    SendClientMessage(playerid, COLOR_RED, "* You are not near a business");
		    return 1;
		}
	    
        if (Checkpoints[id][cOwner] != INVALID_PLAYER_ID)
        {
            SendClientMessage(playerid, COLOR_RED, "* This business is already owned by someone else");
            return 1;
        }
        
        if (GetPlayerMoney(playerid) < Checkpoints[id][cPrice])
        {
            SendClientMessage(playerid, COLOR_RED, "* You can't afford this business");
            return 1;
        }
        
    	new msg[128];
    	GivePlayerMoney(playerid, -Checkpoints[id][cPrice]);
    	Checkpoints[id][cOwner] = playerid;
    	format(msg, 128, "* You have bought %s for %s and will reguarly receive an income of %s", Checkpoints[id][cName], FormatMoney(Checkpoints[id][cPrice]), FormatMoney(Checkpoints[id][cIncome]));
    	SendClientMessage(playerid, COLOR_CYAN, msg);
    	format(msg, 128, "* %s has bought %s for %s", Players[playerid][Name], Checkpoints[id][cName], FormatMoney(Checkpoints[id][cPrice]));
    	SendClientMessageToAllEx(COLOR_PINK, msg, playerid);
    	
		return 1;
	}
	
	if (!strcmp("/sell", cmd, true))
	{
	    tmp = strtok(cmdtext, idx);
	    if (!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_RED, "The syntax is /sell <id>, for a list of your businesses type /mybusinesses");
			return 1;
		}
		
		new msg[128];
	    new id = strval(tmp);
	    if (Checkpoints[id][cOwner] != playerid)
	    {
	        format(msg, 128, "* You are not the owner of %s", Checkpoints[id][cName]);
	        SendClientMessage(playerid, COLOR_RED, msg);
	        return 1;
	    }
	    
	    Checkpoints[id][cOwner] = INVALID_PLAYER_ID;
	    GivePlayerMoney(playerid, Checkpoints[id][cPrice]);
	    format(msg, 128, "* You have sold %s for %s", Checkpoints[id][cName], FormatMoney(Checkpoints[id][cPrice]));
		SendClientMessage(playerid, COLOR_CYAN, msg);
	    format(msg, 128, "* %s is now available for purchase after %s sold it", Checkpoints[id][cName], Players[playerid][Name]);
	    SendClientMessageToAllEx(COLOR_PINK, msg, playerid);
	    
	    return 1;
	}
	
	if (!strcmp("/givecash", cmd, true))
	{
	    tmp = strtok(cmdtext, idx);
	    if (!strlen(tmp))
	    {
	        SendClientMessage(playerid, COLOR_RED, "* Syntax: /givecash <id> <amount>");
	        return 1;
	    }
	    new id = strval(tmp);

		tmp = strtok(cmdtext, idx);
	    if (!strlen(tmp))
	    {
	        SendClientMessage(playerid, COLOR_RED, "* Syntax: /givecash <id> <amount>");
	        return 1;
	    }
	    new amount = strval(tmp);
	    
	    if (!IsPlayerConnected(id))
	    {
	        SendClientMessage(playerid, COLOR_RED, "* That player isn't online");
	        return 1;
	    }
	    
	    if (GetPlayerMoney(playerid) < amount)
	    {
			SendClientMessage(playerid, COLOR_RED, "* You don't have that much money");
			return 1;
	    }
	    

	    GivePlayerMoney(playerid, -amount);
	    GivePlayerMoney(id, amount);
	    new msg[128];
		format(msg, 128, "* %s gave you %s", Players[playerid][Name], FormatMoney(amount));
		SendClientMessage(id, COLOR_GREEN, msg);
		format(msg, 128, "* You gave %s to %s", FormatMoney(amount), Players[id][Name]);
		SendClientMessage(playerid, COLOR_GREEN, msg);
	}
	
	if (!IsPlayerAdmin(playerid)) return 0;
	
	if (!strcmp("/pos", cmd, true))
	{
	    new File:log = fopen("Checkpoints.txt", io_append);
	    if (log)
	    {
		    new msg[128], comment[128];
		    tmp = strtok(cmdtext, idx);
		    if (!strlen(tmp)) { format(comment, 64, "No comment"); }
		    else { format(comment, 64, "%s", tmp); }

			new Float:X, Float:Y, Float:Z, Float:A;
		    GetPlayerPos(playerid, X, Y, Z);
		    GetPlayerFacingAngle(playerid, A);
		    format(msg, 128, "%0.2f, %0.2f, %0.2f, %0.2f ; %s\r\n", X, Y, Z, A, comment);
		    fwrite(log, msg);
		    fclose(log);
		    SendClientMessage(playerid, COLOR_CYAN, msg);
	    }
	    
		return 1;
	}
	
	return 0;
}

// ----------------------------------------------------------------------------------------

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnPlayerExitVehicle(playerid, vehicleid)
{
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnPlayerEnterCheckpoint(playerid)
{
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnPlayerEnterRaceCheckpoint(playerid)
{
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnRconCommand(cmd[])
{
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnPlayerRequestSpawn(playerid)
{
	SetPlayerInterior(playerid, 0);
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnObjectMoved(objectid)
{
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnPlayerPickUpPickup(playerid, pickupid)
{
	new id = CheckpointPickups[pickupid];
	if (Checkpoints[id][cType] > TYPE_EMPTY)
	{
		switch (Checkpoints[id][cType])
		{
			case TYPE_AMMUNATION_ENTER:
			{
				GetPlayerPos(playerid, TeleportShop[playerid][0], TeleportShop[playerid][1], TeleportShop[playerid][2]);

				SetPlayerPos(playerid, 286.80, -82.54, 1001.53);
				SetPlayerInterior(playerid, 4);
				BuyingGuns[playerid] = 1;

				SendClientMessage(playerid, COLOR_PINK, "* You have entered Ammu-nation, type /weapons for a list of weapons");
			}

			case TYPE_AMMUNATION_EXIT:
			{
				SetPlayerPos(playerid, TeleportShop[playerid][0], TeleportShop[playerid][1], TeleportShop[playerid][2]);
				SetPlayerInterior(playerid, 0);
				BuyingGuns[playerid] = 0;
			}

			case TYPE_BANK:
			{
			    if (LastPickup[playerid] != id)
			    {
					ShowPlayerDialog(playerid, DIALOG_BANK, DIALOG_STYLE_LIST, "Bank", "Withdraw\nDeposit\n", "Select", "Cancel");
				}
			}

			case TYPE_PAYPOINT:
			{
				// What to do?
			}
			
			case TYPE_BUSINESS:
			{
				new msg[128];
				if (Checkpoints[id][cOwner] == INVALID_PLAYER_ID)
				{
					format(msg, 128, "%s: This business is currently FOR SALE for %s and has an income of %s", Checkpoints[id][cName], FormatMoney(Checkpoints[id][cPrice]), FormatMoney(Checkpoints[id][cIncome]));
					SendClientMessage(playerid, COLOR_CYAN, msg);
					SendClientMessage(playerid, COLOR_CYAN, "To buy this property please type /buy.");
				}
				else
				{
					format(msg, 128, "%s: This business is a property of %s.", Checkpoints[id][cName], Players[Checkpoints[id][cOwner]][Name]);
					SendClientMessage(playerid, COLOR_CYAN, msg);
				}
			}
		}
		LastPickup[playerid] = id;
	}
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnVehicleMod(playerid, vehicleid, componentid)
{
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnPlayerUpdate(playerid)
{
	if (MostMoneyAmount < GetPlayerMoney(playerid))
	{
		if (MostMoneyPlayer != playerid)
		{
			new msg[128];
			format(msg, 128, "$$$ %s is now in lead in the money run with %s $$$", Players[playerid][Name], FormatMoney(GetPlayerMoney(playerid)));
			SendClientMessageToAll(COLOR_YELLOW, msg);
			MostMoneyPlayer = playerid;
		}
		MostMoneyAmount = GetPlayerMoney(playerid);
	}
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnPlayerStreamIn(playerid, forplayerid)
{
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if (dialogid == DIALOG_WEAPONS)
	{
	    if (response)
	    {
	        if (GetPlayerMoney(playerid) < WeaponInfo[listitem][Cost])
	        {
	            SendClientMessage(playerid, COLOR_RED, "* You can't afford that weapon");
	            return 1;
			}
			
			GivePlayerMoney(playerid, -WeaponInfo[listitem][Cost]);
			GivePlayerWeapon(playerid, WeaponInfo[listitem][ID], WeaponInfo[listitem][Ammo]);
			new msg[128];
			format(msg, 128, "* You bought a %s for %s", WeaponNames[WeaponInfo[listitem][ID]], FormatMoney(WeaponInfo[listitem][Cost]));
			SendClientMessage(playerid, COLOR_GREEN, msg);
	    }
	}
	
	if (dialogid == DIALOG_BANK)
	{
	    if (response)
	    {
	        new msg[128];
	        switch (listitem)
	        {
	            case 0:
	            {
					format(msg, sizeof(msg), "Please fill in the amount of money you would like to withdraw.\n%s available.", FormatMoney(Players[playerid][Bank]));
					ShowPlayerDialog(playerid, DIALOG_BANK_WITHDRAW, DIALOG_STYLE_INPUT, "Bank", msg, "Withdraw", "Cancel");
	            }
	            case 1:
	            {
					format(msg, sizeof(msg), "Please fill in the amount of money you would like to deposit.\n%s available.", FormatMoney(GetPlayerMoney(playerid)));
					ShowPlayerDialog(playerid, DIALOG_BANK_DEPOSIT, DIALOG_STYLE_INPUT, "Bank", msg, "Deposit", "Cancel");
	            }
	        }
	    }
	}
	
	if (dialogid == DIALOG_BANK_WITHDRAW)
	{
		if (response)
		{
		    new msg[128];
		    
	        if (!strval(inputtext))
			{
				SendClientMessage(playerid, COLOR_RED, "* Bank: Invalid input.");
				format(msg, sizeof(msg), "Please fill in the amount of money you would like to withdraw.\n%s available.", FormatMoney(Players[playerid][Bank]));
				ShowPlayerDialog(playerid, DIALOG_BANK_WITHDRAW, DIALOG_STYLE_INPUT, "Bank", msg, "Withdraw", "Cancel");
				return 1;
			}
			
			new amount = strval(inputtext);
            if (amount < 1)
			{
				SendClientMessage(playerid, COLOR_RED, "* You can't withdraw anything less than $1");
				format(msg, sizeof(msg), "Please fill in the amount of money you would like to withdraw.\n%s available.", FormatMoney(Players[playerid][Bank]));
				ShowPlayerDialog(playerid, DIALOG_BANK_WITHDRAW, DIALOG_STYLE_INPUT, "Bank", msg, "Withdraw", "Cancel");
				return 1;
			}

            if (amount > Players[playerid][Bank])
            {
				format(msg, sizeof(msg), "* You only have %s available", FormatMoney(Players[playerid][Bank]));
				SendClientMessage(playerid, COLOR_RED, msg);
				format(msg, sizeof(msg), "Please fill in the amount of money you would like to withdraw.\n%s available.", FormatMoney(Players[playerid][Bank]));
				ShowPlayerDialog(playerid, DIALOG_BANK_WITHDRAW, DIALOG_STYLE_INPUT, "Bank", msg, "Withdraw", "Cancel");
				return 1;
            }

            GivePlayerMoney(playerid, amount);
            Players[playerid][Bank] -= amount;
            format(msg, sizeof(msg), "* You have withdrawn %s. Current bank balance: %s", FormatMoney(amount), FormatMoney(Players[playerid][Bank]));
            SendClientMessage(playerid, COLOR_GREEN, msg);

			return 1;
	    }
	}
	
	if (dialogid == DIALOG_BANK_DEPOSIT)
	{
		if (response)
	    {
	        new msg[128];
	        
	        if (!strval(inputtext))
	        {
	            SendClientMessage(playerid, COLOR_RED, "* You can't deposit anything less than $1");
				format(msg, sizeof(msg), "Please fill in the amount of money you would like to deposit.\n%s available.", FormatMoney(GetPlayerMoney(playerid)));
				ShowPlayerDialog(playerid, DIALOG_BANK_DEPOSIT, DIALOG_STYLE_INPUT, "Bank", msg, "Deposit", "Cancel");
	            return 1;
	        }
	        
	        new amount = strval(inputtext);
            
            if (amount < 1)
			{
				SendClientMessage(playerid, COLOR_RED, "* You can't deposit anything less than $1");
				format(msg, sizeof(msg), "Please fill in the amount of money you would like to deposit.\n%s available.", FormatMoney(GetPlayerMoney(playerid)));
				ShowPlayerDialog(playerid, DIALOG_BANK_DEPOSIT, DIALOG_STYLE_INPUT, "Bank", msg, "Deposit", "Cancel");
				return 1;
			}
			
            if (amount > GetPlayerMoney(playerid))
            {
				format(msg, sizeof(msg), "* You only have %s available", FormatMoney(GetPlayerMoney(playerid)));
				SendClientMessage(playerid, COLOR_RED, msg);
				format(msg, sizeof(msg), "Please fill in the amount of money you would like to deposit.\n%s available.", FormatMoney(GetPlayerMoney(playerid)));
				ShowPlayerDialog(playerid, DIALOG_BANK_DEPOSIT, DIALOG_STYLE_INPUT, "Bank", msg, "Deposit", "Cancel");
				return 1;
            }

            GivePlayerMoney(playerid, -amount);
            Players[playerid][Bank] += amount;
            format(msg, sizeof(msg), "* You have deposited %s. Current bank balance: %s", FormatMoney(amount), FormatMoney(Players[playerid][Bank]));
            SendClientMessage(playerid, COLOR_GREEN, msg);

            return 1;
	    }
	}
	return 1;
}

// ----------------------------------------------------------------------------------------

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	return 1;
}

// ----------------------------------------------------------------------------------------

forward BusinessTimer();
public BusinessTimer()
{
	new PlrIncome[MAX_PLAYERS];
	for (new i = 0; i < sizeof(Checkpoints); i++)
	{
	    if (Checkpoints[i][cType] == TYPE_BUSINESS)
	    {
	        new id = Checkpoints[i][cOwner];
	        if (id != INVALID_PLAYER_ID && IsPlayerConnected(id))
	        {
	            GivePlayerMoney(id, Checkpoints[i][cIncome]);
	            PlrIncome[id] += Checkpoints[i][cIncome];
	        }
	    }
	}
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
	    if (IsPlayerConnected(i) && PlrIncome[i] > 0)
	    {
	        new msg[128];
	        format(msg, 128, "* You earned %s from your properties", FormatMoney(PlrIncome[i]));
	        SendClientMessage(i, COLOR_CYAN, msg);
	    }
	}
}

// ----------------------------------------------------------------------------------------

forward PaypointTimer();
public PaypointTimer()
{
	for (new i = 0; i < sizeof(Checkpoints); i++)
	{
	    if (Checkpoints[i][cType] == TYPE_PAYPOINT)
	    {
	        for (new x = 0; x < MAX_PLAYERS; x++)
	        {
	            if (IsPlayerConnected(x) && IsPlayerInRangeOfPoint(x, 3.0, Checkpoints[i][cX], Checkpoints[i][cY], Checkpoints[i][cZ]))
	            {
	                GivePlayerMoney(x, PAYPOINTMONEY);
	            }
	        }
	    }
	}
}

// ----------------------------------------------------------------------------------------

stock SendClientMessageToAllEx(color, string[], playerid)
{
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
	    if (IsPlayerConnected(i) && i != playerid)
	    {
	        SendClientMessage(i, color, string);
	    }
	}
}

// ----------------------------------------------------------------------------------------

stock strtok(const string[], &index)
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}

// ----------------------------------------------------------------------------------------

// Credits to mick88 for this
stock FormatMoney(Float:amount, delimiter[2]=",")
{
	#define MAX_MONEY_STRING 16
	new txt[MAX_MONEY_STRING];
	format(txt, MAX_MONEY_STRING, "$%d", floatround(amount));
	new l = strlen(txt);
	if (amount < 0) // -
	{
	    if (l > 5) strins(txt, delimiter, l-3);
		if (l > 8) strins(txt, delimiter, l-6);
		if (l > 11) strins(txt, delimiter, l-9);
	}
	else
	{
		if (l > 4) strins(txt, delimiter, l-3);
		if (l > 7) strins(txt, delimiter, l-6);
		if (l > 10) strins(txt, delimiter, l-9);
	}
	return txt;
}
